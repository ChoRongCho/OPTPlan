--------------  ---------------------------
Project Time    2024-08-04 17:55:32.709701
Task            bin_packing
Exp_Name        instance23
API JSON        setting.json
Example Prompt  prompt_examples_python.json
Max Predicates  2
--------------  ---------------------------
--------------------------------------------------
Q: 
The first image shows a top view of an object (the one which is the closest to the center of the image) while the second image shows a side view of them.
Please identify the shapes, dimensions, and colors of the object based on these images according to the definitions in "[Definitions of dimensions and shapes]" below.
Your answer must follow the naming convention which is "color_dimension_shape" (e.g., red_3D_cuboid or black_2D_ring).
Ensure that there is no contradiction between the shape and dimension. For example, "3D" and "circle" are not compatible according to their definitions in "[Definitions of dimensions and shapes]".

[Definitions of dimensions and shapes]
Dimension
1D: One-dimensional object
2D: Two-dimensional object
3D: Three-dimensional object


Shape
1D
Line: A one-dimensional object characterized by a straight path connecting two endpoints, having a definite length but no width. If an object is with an empty center, it should not be a line.

2D
Circle: A two-dimensional round object with every point on its edge equidistant from its center
Rectangle: A two-dimensional polygonal object with opposite sides equal and four right angles
Triangle: A two-dimensional polygonal object with three sides and three angles
Polygon: A two-dimensional object with multiple straight sides (e.g., a pentagon is with 5 sides, a hexagon is with 6 sides)
Loop: A two-dimensional object with a closed curve characterized by an empty center, forming a continuous loop

3D
Sphere: A round three-dimensional object where every point on its surface is equidistant from its center
Cube: A three-dimensional object with six equal square faces
Cuboid: A three-dimensional object with six rectangular faces
Pyramid: A three-dimensional object with a polygonal base and triangular faces that converge to a single point
Cylinder: A three-dimensional object with two parallel circular bases connected by a curved surface
Cone: A three-dimensional object with a circular base that tapers to a single point
Polyhedron: A three-dimensional object with flat polygonal faces, straight edges, and vertices,


Your answer must use the template below:

Please answer with the template below:
---template start---
Answer
---
object in box: # if nothing is in the box, leave this answer blank
object out box: brown_3D_cuboid, black_2D_circle  # this is an example
box: white_box # specify only the color of the box 
---

Descriptions about objects in the scene
*your descriptions in 200 words
---template end---


A: 
---template start---
Answer
---
object in box: yellow_3D_cuboid
object out box: red_3D_polyhedron, green_2D_loop
box: white_box
---

Descriptions about objects in the scene
The scene contains a white box with a yellow 3D cuboid inside it. Outside the box, there is a red 3D polyhedron and a green 2D loop. The red 3D polyhedron has a complex shape with multiple faces and is positioned near the center of the images. The green 2D loop is a small circular object with an empty center, located near the red polyhedron. The white box has a lattice design and contains the yellow 3D cuboid, which has six rectangular faces. The objects are placed on a perforated white surface with a grid of black dots.
---template end---
----------------------------------------------------------------------------------------------------

Q: We are going to generate an action sequence to perform the task, bin_packing, using Python which works similar to PDDL. Our goal is to define the types of objects and their predicates within the dataclass Object. 
Here, we have the types, names, and properties of the objects recognized from the input images. We need to use this information to complete the Object class.{0: {'name': 'red_3D_polyhedron', 'shape': '3D_polyhedron', 'color': 'red', 'predicates': ['is_soft'], 'init_pose': 'out_box'}, 1: {'name': 'green_2D_loop', 'shape': '2D_loop', 'color': 'green', 'predicates': ['is_soft'], 'init_pose': 'out_box'}, 2: {'name': 'yellow_3D_cuboid', 'shape': '3D_cuboid', 'color': 'yellow', 'predicates': ['is_soft', 'is_elastic'], 'init_pose': 'in_box'}, 3: {'name': 'white_box', 'shape': 'box', 'color': 'white', 'predicates': [], 'init_pose': 'box'}} 

from dataclasses import dataclass


@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj
    
    # Basic effect predicates for obj
    pushed: bool
    folded: bool
    
    # Predicates for box
    in_bin_objects: list
    
    # Object physical properties 
    
    # pre-conditions and effects for bin_packing task planning (max: 2)
    
    
However, we cannot complete a planning with this dataclass predicate alone which means that we have to add other predicates that fully describe bin_packing task. 
Also you have to add predicates such as is_elastic, and is_soft. 
You are free to add more predicates for bin_packing to class Object if necessary. 
Add more predicates needed for bin_packing to class Object. 

Please answer using the template below:
---template start---
Answer:
```python
# only write a code here without example instantiation
```
Reason:
# Explain in less than 200 words and why you made such predicates
---template end---


A: 
from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj
    
    # Basic effect predicates for obj
    pushed: bool
    folded: bool
    
    # Predicates for box
    in_bin_objects: list
    
    # Object physical properties 
    is_soft: bool
    is_elastic: bool
    
    # pre-conditions and effects for bin_packing task planning (max: 2)
    in_box: bool
    out_box: bool
----------------------------------------------------------------------------------------------------

Q: Our current task is to create actions for the robot, similar to the domain file in PDDL. The parts corresponding to the types of objects and predicates are provided as a class object, as shown below.from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj
    
    # Basic effect predicates for obj
    pushed: bool
    folded: bool
    
    # Predicates for box
    in_bin_objects: list
    
    # Object physical properties 
    is_soft: bool
    is_elastic: bool
    
    # pre-conditions and effects for bin_packing task planning (max: 2)
    in_box: bool
    out_box: bool

Our goal is to define the pre-conditions and effects for the robot's actions, similar to how they are done in PDDL. Definitions of pre-conditions and effects in natural language are provided in each action in the basic Robot class below. Please refer to them to creat actions.
class Robot:
    def __init__(self,
                 name: str = "OpenManipulator",
                 goal: str = None,
                 actions: dict = None):
        self.name = name
        self.goal = goal
        self.actions = actions
    
        self.robot_handempty = True
        self.robot_now_holding = False
        self.robot_base_pose = True
    
    # basic state
    def state_handempty(self):
        self.robot_handempty = True
        self.robot_base_pose = False
    
    # basic state
    def state_holding(self, objects):
        self.robot_handempty = False
        self.robot_now_holding = objects
        self.robot_base_pose = False
    
    # basic state
    def state_base(self):
        self.robot_base_pose = True
    
    def pick(self, obj, bin):
        # make a pre-conditions for actions using if-else phrase
        # Action Description: pick an {object} not in the {bin}, it dose not include 'place' action
        # Rules: None
        print(f"Pick obj.name")
        print(f"Cannot Pick obj.name")
        
    def place(self, obj, bin):
        # Action Description: place an {object} on the {bin or not bin}
        # Rules: Before place a fragile or rigid object, soft object should be in the box if there is any soft objects. 
        print(f"Place obj.name in bin.name")
        bin.in_bin_objects.append(obj)
    
    def push(self, obj, bin): 
        # Action Description: push an {object} downward in the bin, hand must be empty when pushing
        # Rules: Only push soft objects after placing items in the bin.
        print(f"Push obj.name")
        obj.pushed
    
    def fold(self, obj, bin):
        # Action Description: fold an {object}, hand must be empty when folding
        # Rules: Fold objects only if they are foldable. 
        print(f"Fold obj.name")
        obj.folded
    
    def out(self, obj, bin):
        # Action Description: pick an {object} in {bin} and place an {object} on platform. After the action, the robot hand is empty
        # Rules: None
        print(f"Out obj.name from bin.name")
        bin.in_bin_objects.remove(obj)
        

Please make more action pre-conditions and effect of the robot For example, if you place an object in hand, obj.in_bin=False. 
However, if there are predicates that are mentioned in the rules but not in the object class, do not reflect those predictions in the rules.

Please answer with the template below:
---template start---
Answer:
```python
# only write a code here without example instantiation
```
Reason:
# Explain in less than 300 words why you made such robot actions
---template end---


A: 
Answer:
```python
def pick(self, obj, bin):
    # Preconditions
    if self.robot_handempty and obj.out_box and not obj.in_box:
        # Effects
        self.state_holding(obj)
        obj.out_box = False
        obj.in_box = True
        print(f"Pick {obj.name}")
    else:
        print(f"Cannot Pick {obj.name}")

def place(self, obj, bin):
    # Preconditions
    if not self.robot_handempty and obj.in_box:
        # Effects
        self.state_handempty()
        obj.in_box = False
        obj.out_box = True
        bin.in_bin_objects.append(obj)
        print(f"Place {obj.name} in {bin.name}")
    else:
        print(f"Cannot Place {obj.name} in {bin.name}")

def push(self, obj, bin):
    # Preconditions
    if self.robot_handempty and obj.is_soft and obj.in_box:
        # Effects
        obj.pushed = True
        print(f"Push {obj.name}")
    else:
        print(f"Cannot Push {obj.name}")

def fold(self, obj, bin):
    # Preconditions
    if self.robot_handempty and obj.is_elastic and obj.in_box:
        # Effects
        obj.folded = True
        print(f"Fold {obj.name}")
    else:
        print(f"Cannot Fold {obj.name}")

def out(self, obj, bin):
    # Preconditions
    if obj.in_box and not self.robot_handempty:
        # Effects
        self.state_handempty()
        obj.in_box = False
        obj.out_box = True
        bin.in_bin_objects.remove(obj)
        print(f"Out {obj.name} from {bin.name}")
    else:
        print(f"Cannot Out {obj.name} from {bin.name}")
```
Reason:
The preconditions and effects for each action are defined based on the natural language descriptions provided. The `pick` action requires the robot's hand to be empty and the object to be outside the box. The `place` action requires the robot to be holding the object and the object to be in the box. The `push` action requires the robot's hand to be empty and the object to be soft and in the box. The `fold` action requires the robot's hand to be empty and the object to be elastic and in the box. The `out` action requires the object to be in the box and the robot to be holding it. These conditions ensure that the actions are performed logically and in accordance with the task requirements.
----------------------------------------------------------------------------------------------------

Q: We are now making initial state of the bin_packing. We get these information from the input images. 

{0: {'name': 'red_3D_polyhedron', 'shape': '3D_polyhedron', 'color': 'red', 'predicates': ['is_soft'], 'init_pose': 'out_box'}, 1: {'name': 'green_2D_loop', 'shape': '2D_loop', 'color': 'green', 'predicates': ['is_soft'], 'init_pose': 'out_box'}, 2: {'name': 'yellow_3D_cuboid', 'shape': '3D_cuboid', 'color': 'yellow', 'predicates': ['is_soft', 'is_elastic'], 'init_pose': 'in_box'}, 3: {'name': 'white_box', 'shape': 'box', 'color': 'white', 'predicates': [], 'init_pose': 'box'}}
from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj
    
    # Basic effect predicates for obj
    pushed: bool
    folded: bool
    
    # Predicates for box
    in_bin_objects: list
    
    # Object physical properties 
    is_soft: bool
    is_elastic: bool
    
    # pre-conditions and effects for bin_packing task planning (max: 2)
    in_box: bool
    out_box: bool

Using the above information, Please organize the initial state of the domain in a table. 


Please answer with the template below:
---template start---
### 1. Init Table
# fill your table

### 2. Python Codes
# make init state into python code
# don't include the object classes or robot class, make only objects and bin 
# example 
object0 = Object(index=0, name='black_3D_cuboid', color='black', shape='3D_cuboid', ...)
object1 = Object(index=1, name='white_2D_circle', color='white', shape='2D_circle', ...)
...

### 3. Notes:
# Fill your notes
---template end---


A: 
---template start---

### 1. Init Table
| Index | Name              | Color  | Shape        | Object Type | Pushed | Folded | In Bin Objects | Is Soft | Is Elastic | In Box | Out Box |
|-------|-------------------|--------|--------------|-------------|--------|--------|----------------|---------|------------|--------|---------|
| 0     | red_3D_polyhedron | red    | 3D_polyhedron| obj         | False  | False  | []             | True    | False      | False  | True    |
| 1     | green_2D_loop     | green  | 2D_loop      | obj         | False  | False  | []             | True    | False      | False  | True    |
| 2     | yellow_3D_cuboid  | yellow | 3D_cuboid    | obj         | False  | False  | []             | True    | True       | True   | False   |
| 3     | white_box         | white  | box          | box         | False  | False  | []             | False   | False      | True   | False   |

### 2. Python Codes
# make init state into python code
# don't include the object classes or robot class, make only objects and bin 
# example 
object0 = Object(index=0, name='red_3D_polyhedron', color='red', shape='3D_polyhedron', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=False, out_box=True)
object1 = Object(index=1, name='green_2D_loop', color='green', shape='2D_loop', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=False, out_box=True)
object2 = Object(index=2, name='yellow_3D_cuboid', color='yellow', shape='3D_cuboid', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=True, in_box=True, out_box=False)
object3 = Object(index=3, name='white_box', color='white', shape='box', object_type='box', pushed=False, folded=False, in_bin_objects=[], is_soft=False, is_elastic=False, in_box=True, out_box=False)

### 3. Notes:
# The 'in_bin_objects' list is empty for all objects initially.
# The 'pushed' and 'folded' predicates are set to False for all objects initially.
# The 'object_type' is set to 'obj' for all objects except the box, which is set to 'box'.
# The 'in_box' and 'out_box' predicates are mutually exclusive for each object.
---template end---
----------------------------------------------------------------------------------------------------

Q: We are now making goal state of the bin_packing. Your goal is to redefine the goal state given in natural language into a table. 

This is an init state table. 
| Index | Name              | Color  | Shape        | Object Type | Pushed | Folded | In Bin Objects | Is Soft | Is Elastic | In Box | Out Box |
|-------|-------------------|--------|--------------|-------------|--------|--------|----------------|---------|------------|--------|---------|
| 0     | red_3D_polyhedron | red    | 3D_polyhedron| obj         | False  | False  | []             | True    | False      | False  | True    |
| 1     | green_2D_loop     | green  | 2D_loop      | obj         | False  | False  | []             | True    | False      | False  | True    |
| 2     | yellow_3D_cuboid  | yellow | 3D_cuboid    | obj         | False  | False  | []             | True    | True       | True   | False   |
| 3     | white_box         | white  | box          | box         | False  | False  | []             | False   | False      | True   | False   |

Our goal is listed below. 
Packing all objects into the box
And, this is rules that when you do actions. 
{'place': 'Before place a fragile or rigid object, soft object should be in the box if there is any soft objects. ', 'pick': 'None', 'fold': 'Fold objects only if they are foldable. ', 'push': 'Only push soft objects after placing items in the bin.', 'out': 'None'}


Using the above information, Please organize the goal state of the domain in a table. 


Please answer with the template below:
---template start---
### 1. Goal Table
# fill your table similar with initial state

### 2. Notes:
# Fill your notes
---template end---


A: 
---template start---
### 1. Goal Table
| Index | Name              | Color  | Shape        | Object Type | Pushed | Folded | In Bin Objects | Is Soft | Is Elastic | In Box | Out Box |
|-------|-------------------|--------|--------------|-------------|--------|--------|----------------|---------|------------|--------|---------|
| 0     | red_3D_polyhedron | red    | 3D_polyhedron| obj         | False  | False  | []             | True    | False      | True   | False   |
| 1     | green_2D_loop     | green  | 2D_loop      | obj         | False  | False  | []             | True    | False      | True   | False   |
| 2     | yellow_3D_cuboid  | yellow | 3D_cuboid    | obj         | False  | False  | []             | True    | True       | True   | False   |
| 3     | white_box         | white  | box          | box         | False  | False  | [0, 1, 2]      | False   | False      | True   | False   |

### 2. Notes:
- All objects (red_3D_polyhedron, green_2D_loop, yellow_3D_cuboid) are placed inside the white_box.
- The white_box contains the indices of all objects (0, 1, 2).
- The rules for placing, picking, folding, pushing, and taking objects out of the box have been followed.
- Soft objects (red_3D_polyhedron, green_2D_loop) are placed in the box before any rigid or fragile objects.
---template end---
----------------------------------------------------------------------------------------------------

Q: This is the Object class, which defines both object types and predicates. 
from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj
    
    # Basic effect predicates for obj
    pushed: bool
    folded: bool
    
    # Predicates for box
    in_bin_objects: list
    
    # Object physical properties 
    is_soft: bool
    is_elastic: bool
    
    # pre-conditions and effects for bin_packing task planning (max: 2)
    in_box: bool
    out_box: bool

This is the Robot class, which includes pre-conditions and effects of actions. 


This is the initial state represented in a python code. 
code
# don't include the object classes or robot class, make only objects and bin 
# example 
object0 = Object(index=0, name='red_3D_polyhedron', color='red', shape='3D_polyhedron', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=False, out_box=True)
object1 = Object(index=1, name='green_2D_loop', color='green', shape='2D_loop', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=False, out_box=True)
object2 = Object(index=2, name='yellow_3D_cuboid', color='yellow', shape='3D_cuboid', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=True, in_box=True, out_box=False)
object3 = Object(index=3, name='white_box', color='white', shape='box', object_type='box', pushed=False, folded=False, in_bin_objects=[], is_soft=False, is_elastic=False, in_box=True, out_box=False)

### 3. Notes:
# The 'in_bin_objects' list is empty for all objects initially.
# The 'pushed' and 'folded' predicates are set to False for all objects initially.
# The 'object_type' is set to 'obj' for all objects except the box, which is set to 'box'.
# The 'in_box' and 'out_box' predicates are mutually exclusive for each object.
---template end--

You must follow the rules: 
{'place': 'Before place a fragile or rigid object, soft object should be in the box if there is any soft objects. ', 'pick': 'None', 'fold': 'Fold objects only if they are foldable. ', 'push': 'Only push soft objects after placing items in the bin.', 'out': 'None'}
Make an action sequence under the if __name__ == '__main__':. 
You must make a correct action sequence. 
An action sequence is incorrect if any of its actions with a conditional statement does not satisfy the if clause.

This is the initial state table of all objects. 
| Index | Name              | Color  | Shape        | Object Type | Pushed | Folded | In Bin Objects | Is Soft | Is Elastic | In Box | Out Box |
|-------|-------------------|--------|--------------|-------------|--------|--------|----------------|---------|------------|--------|---------|
| 0     | red_3D_polyhedron | red    | 3D_polyhedron| obj         | False  | False  | []             | True    | False      | False  | True    |
| 1     | green_2D_loop     | green  | 2D_loop      | obj         | False  | False  | []             | True    | False      | False  | True    |
| 2     | yellow_3D_cuboid  | yellow | 3D_cuboid    | obj         | False  | False  | []             | True    | True       | True   | False   |
| 3     | white_box         | white  | box          | box         | False  | False  | []             | False   | False      | True   | False   |

And this is the goal state table of all objects. 
| Index | Name              | Color  | Shape        | Object Type | Pushed | Folded | In Bin Objects | Is Soft | Is Elastic | In Box | Out Box |
|-------|-------------------|--------|--------------|-------------|--------|--------|----------------|---------|------------|--------|---------|
| 0     | red_3D_polyhedron | red    | 3D_polyhedron| obj         | False  | False  | []             | True    | False      | True   | False   |
| 1     | green_2D_loop     | green  | 2D_loop      | obj         | False  | False  | []             | True    | False      | True   | False   |
| 2     | yellow_3D_cuboid  | yellow | 3D_cuboid    | obj         | False  | False  | []             | True    | True       | True   | False   |
| 3     | white_box         | white  | box          | box         | False  | False  | [0, 1, 2]      | False   | False      | True   | False   |


Please answer with the template below:
---template start---

if __name__ == "__main__":
    # First, using goal table, describe the initial state and final state of each object
    ...
    # Second, using given rules and object's states, make a task planning strategy

    # Third, make an action sequence. You should be aware of the robot action effects such as 'push' or 'out'. 
    # a) Initialize the robot
    robot = Robot()
    # b) Define the box, this is an example. 
    box = object5

    # Fourth, after making all actions, fill your reasons according to the rules
    ...

    # Finally, check if the goal state is satisfying goal state table. Use a template below. These are examples. 
    assert object0.is_in_box == True or False
    assert object1.is_in_box == True or False
    ...
    # assert final_object.is_in_box == True or False
    
    # Don't include a box in the goal state. Only express objects.
    ...
    print("All task planning is done")
     
---template end---
    

A: 
```python
if __name__ == "__main__":
    # First, using goal table, describe the initial state and final state of each object
    object0 = Object(index=0, name='red_3D_polyhedron', color='red', shape='3D_polyhedron', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=False, out_box=True)
    object1 = Object(index=1, name='green_2D_loop', color='green', shape='2D_loop', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=False, out_box=True)
    object2 = Object(index=2, name='yellow_3D_cuboid', color='yellow', shape='3D_cuboid', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=True, in_box=True, out_box=False)
    object3 = Object(index=3, name='white_box', color='white', shape='box', object_type='box', pushed=False, folded=False, in_bin_objects=[], is_soft=False, is_elastic=False, in_box=True, out_box=False)

    # Goal state
    goal_object0 = Object(index=0, name='red_3D_polyhedron', color='red', shape='3D_polyhedron', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=True, out_box=False)
    goal_object1 = Object(index=1, name='green_2D_loop', color='green', shape='2D_loop', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=False, in_box=True, out_box=False)
    goal_object2 = Object(index=2, name='yellow_3D_cuboid', color='yellow', shape='3D_cuboid', object_type='obj', pushed=False, folded=False, in_bin_objects=[], is_soft=True, is_elastic=True, in_box=True, out_box=False)
    goal_object3 = Object(index=3, name='white_box', color='white', shape='box', object_type='box', pushed=False, folded=False, in_bin_objects=[0, 1, 2], is_soft=False, is_elastic=False, in_box=True, out_box=False)

    # Second, using given rules and object's states, make a task planning strategy
    # Rules:
    # 1. Place: Before placing a fragile or rigid object, a soft object should be in the box if there is any soft object.
    # 2. Pick: None
    # 3. Fold: Fold objects only if they are foldable.
    # 4. Push: Only push soft objects after placing items in the bin.
    # 5. Out: None

    # Third, make an action sequence. You should be aware of the robot action effects such as 'push' or 'out'. 
    # a) Initialize the robot
    robot = Robot()

    # b) Define the box
    box = object3

    # c) Action sequence
    # Place the soft objects first
    robot.place(object0, box)  # Place red_3D_polyhedron in the box
    robot.place(object1, box)  # Place green_2D_loop in the box

    # Place the remaining objects
    robot.place(object2, box)  # Place yellow_3D_cuboid in the box

    # Push the soft objects into the box
    robot.push(object0, box)  # Push red_3D_polyhedron into the box
    robot.push(object1, box)  # Push green_2D_loop into the box

    # Fourth, after making all actions, fill your reasons according to the rules
    # Reasons:
    # 1. Placed red_3D_polyhedron first because it is a soft object.
    # 2. Placed green_2D_loop next because it is also a soft object.
    # 3. Placed yellow_3D_cuboid after the soft objects as per the rule.
    # 4. Pushed the soft objects into the box after placing them.

    # Finally, check if the goal state is satisfying goal state table. Use a template below. These are examples. 
    assert object0.in_box == True
    assert object1.in_box == True
    assert object2.in_box == True
    assert object3.in_bin_objects == [0, 1, 2]

    print("All task planning is done")
```
----------------------------------------------------------------------------------------------------

